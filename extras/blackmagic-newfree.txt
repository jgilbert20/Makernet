black magic 1 - working

//
//  main.cpp
//  blackmagic
//
//  Created by Jeremy Gilbert on 7/13/17.
//  Copyright Â© 2017 Jeremy Gilbert. All rights reserved.
//

#include <iostream>




#include <iostream>
#include <memory>
#include <cassert>

using namespace std;


template <typename T>
class naive_function;

template <typename ReturnValue, typename... Args>
class naive_function<ReturnValue(Args...)> {
public:
    template <typename T>
    naive_function& operator=(T t) {
        callable_ = new CallableT<T>(t);
        return *this;
    }
    
    ReturnValue operator()(Args... args) const {
        assert(callable_);
        return callable_->Invoke(args...);
    }
    
private:
    class ICallable {
    public:
        virtual ~ICallable() = default;
        virtual ReturnValue Invoke(Args...) = 0;
    };
    
    template <typename T>
    class CallableT : public ICallable {
    public:
        CallableT(const T& t)
        : t_(t) {
        }
        
        ~CallableT() override = default;
        
        ReturnValue Invoke(Args... args) override {
            return t_(args...);
        }
        
    private:
        T t_;
    };
    
    ICallable *callable_;
};

void func() {
    cout << "func" << endl;
}

int toCapture = 1;

int jimmy() {
    naive_function<void()> f;
    f = func;
    f();
    
    f = [=]() { cout << "lambda" << toCapture << endl; };
    f();
    
    return 0;
}

int main()
{
    jimmy();
}

