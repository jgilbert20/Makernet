// Makernet revised core library rebuilt with improved hygene and ability to
// be tested and debugged on OSX

//  c++ -DMASTER makernet.cpp -o master && ./master
//  c++ -DSLAVE makernet.cpp -o slave && ./slave

// This option makes a ton of warnings go away...
// -std=c++11


/********************************************************
 ** 
 **  <FILE>
 ** 
 **  Part of the Makernet framework by Jeremy Gilbert
 ** 
 **  License: GPL 3
 **  See footer for copyright and license details.
 ** 
 ********************************************************/


/******************************************************************************
 *
 * Copyright (C) 2017 Jeremy Gilbert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * If GPL 3 does not suit your needs, feel free to contact the author for
 * alternative licensing arrangements.
 *
 ******************************************************************************/










// util.h















// This is a subclass of the mailbox dictionary. Every peripheral should have
// one so that the mailbox configuration is constant between the peripheral
// code and the object host code. To use it, create member variables for each
// mailbox that could handle values. Then wire them up in the configure()
// function of the implementation.

class EncoderMailboxDictionary : public MailboxDictionary {
public:
	virtual void configure();
	SmallMailbox position   = SmallMailbox(DEVICE, "Encoder position");
	SmallMailbox buttonDown = SmallMailbox(DEVICE, "Button down");
	SmallMailbox buttonUp   = SmallMailbox(DEVICE, "Button up");
};





class EncoderPeripheral : public BasePeripheral {
public:
	EncoderPeripheral();
	virtual void configure();

	EncoderMailboxDictionary encoderDictionary;

};






void EncoderMailboxDictionary::configure()
{
	
	DPR( dANY, "Configuring encoder dictionary...");
	set(0, position);
	set(1, buttonDown);
	set(2, buttonUp);
}


EncoderPeripheral::EncoderPeripheral() :
	BasePeripheral(DeviceType::Encoder)
{
}

void EncoderPeripheral::configure()
{
	 encoderDictionary.configure();
}


EncoderPeripheral encoder;















//#define MASTER



#ifdef MASTER


#else // SLAVE


#endif

